<?xml version="1.0" encoding="UTF-8"?>
<webContent>
	<div class="title">Supported Config File Formats</div>
	<div class="text">
		<p class="text">Coinjema allows for pluggable script "Evaluators" to be
			registered that Coinjema
			then uses to create injection objects for your classes. Currently there
			are 4 evaluators, and
			they are:</p>
		<ul>
			<li>
				<span class="term">.groovy</span>
				- evaluates groovy script and returns the result object. ".groovy"
				refers to
				the file extension that triggers the use of this evaluator.
			</li>
			<li>
				<span class="term">.groovyClass</span>
				- evaluates a groovy file as a class defined in groovy. Instantiates
				the class and returns the new object.
			</li>
			<li>
				<span class="term">.groovySql</span>
				- evaluates a groovy script to a String which is then treated as an
				SQL
				statement and executed. A datasource is expected to be defined in a coinjema
				config file named "coinjema.dataSource".
				Most likely using the groovy evaluator (ie
				"coinjema.dataSource.groovy"). The results of the SQL query are
				converted
				into a single object (if a single row and column are returned), or a
				List (if a single column but multiple rows), or
				a Map&lt;String,Object&gt; (if multiple columns and a single row are
				returned) or a List of Map&lt;String,Object&gt;.
			</li>
			<li>
				<span class="term">.properties</span>
				- reads the file as a standard properties file and returns an object
				of type java.util.Properties. See also the
				<code>.inherit</code>
				extension below.
			</li>
			<li>
				<span class="term">.gproperties</span>
				- reads the file as a standard properties file, but tries to
				interpret
				each key and value as a groovy script that returns a String. Returns an
				object
				of type java.util.Properties. See also the
				<code>.inherit</code>
				extension below.
			</li>
			<li>
				<span class="term">.txt</span>
				- reads the file contents as a String object
			</li>
			<li>
				<span class="term">.jser</span>
				- reads the file as a serialized Java object. The object is
				deserialized, and automatically
				dependency-injected by Coinjema
				<sup>
					<a href="#jser-note">1</a>
				</sup>
			</li>
			<li>
				<span class="term">.compmap</span>
				- properties file format that is translated into a Map object with
				String keys
				pointing to shared object dependencies. Kind of like a collection of
				.redirect
			</li>
			<li>
				<span class="term">.redirect</span>
				- redirects to the injection object created by a different file.
				<a href="redirectEvaluator.html">See More Information</a>
			</li>
		</ul>
	</div>

	<div class="snippet">
		<a name="jser-note"></a>
		<p class="text">
			<sup>1</sup>
			- There is a further requirement that your serialized class must
			override the
			<span class="code">readObject(ObjectInputStream in)</span>
			method (even if only to call
			<span class="code">super.readObject(in)</span>
			. Yes, kind of obnoxious.
		</p>
	</div>

	<div class="title">
		<a name="file_endings"></a>
		Further File Extensions
	</div>
	<div class="text">
		Script/Config files can have an extra extension tacked on after the
		above file format extension. These extensions are
		<ul>
			<li>
				<span class="term">.inherit</span>
				- .properties and .gproperties files can be inherited, meaning that
				a property file in a child context will first load the parent
				properties, and then overwrite them with the child properties. The
				child properties file specifies the ".inherit" extension, and
				inheriting can be done through multiple levels.
			</li>
			<li>
				<span class="term">.perClass</span>
				- Normally Coinjema caches one instance of a dependency for all
				objects that need it. If the .perClass extension is used, then
				Coinjema will cache the dependency objects on a per class basis, so
				that two different classes can receive two different dependency
				objects, whereas two instances of the same class will receive the
				same dependency.
			</li>
			<li>
				<span class="term">.perObject</span>
				- Like .perClass, but now Coinjema will make sure every object
				receives it's own instance of the dependency object.
			</li>
		</ul>
	</div>
</webContent>
