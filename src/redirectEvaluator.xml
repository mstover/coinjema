<?xml version="1.0" encoding="UTF-8"?>
<webContent>
	<div class="title">The Redirect Evaluator</div>
	<p class="text">Redirection allows a configuration file to redirect coinjema to another dependency
		file.  Coinjema will reuse the object already created for that file if it's a shared
		dependency.  To create a redirect file, simply determine the name of the file and append ".redirect"
		as its file extension.  Within the file, enter the name of another dependency file.
	</p>
	<p class="snippet">Of course, the real question is - why do we need a redirector?</p>
	<p class="text">The reason is that the way Coinjema allows developers to specify names in the
		annotations creates an illusion of high customizability and flexibility.  These things do
		increase flexibility slightly, but it can be a dangerous flexibility, akin to putting configuration
		info in the source file.  To rectify this, and create real flexibility, the redirect is
		introduced.</p>
	<p class="text">Let's say we have an interface called <span class="code">TemplateService</span>.
		We have two implementations: <span class="code">VelocityTemplateService</span> and 
		<span class="code">GroovyTemplateService</span>.  Now, let's say we have two classes that
		want to receive a shared dependency of type <span class="code">TemplateService</span>.
	</p>
	<p class="text">Class A depends on <span class="code">TemplateService</span>.<br/>
		Class B depends on <span class="code">TemplateService</span>. <br/> These dependencies could be
		satisfied by a config file called TemplateService.groovy.  But, what would that file return?
		The Velocity implementation or the Groovy implementation?  What if you wanted class A to use
		Velocity and class B to use Groovy?  You could, in class A, use 
		<span class="code">@CoinjemaDependency(type="velocityTemplate")</span> on its 
		<span class="code">setTemplateService(TemplateService)</span> method.  And in class B, you 
		could use <span class="code">@CoinjemaDependency(type="groovyTemplate")</span> on its 
		<span class="code">setTemplateService(TemplateService)</span> method.  Hooray for flexibility!</p>
    <p class="text">But wait, what you've done essentially is put configuration info into your class
		source files.  You have succeeded in your goal of giving class A and B different 
		implementations of <span class="code">TemplateService</span>, but you now cannot 
		cleanly<sup><a href="#redirect-note">1</a></sup> change that just through configuration.</p>
	<p class="text">Enter the redirect.  Instead of setting the implementation specific info in your
		A and B class, you can write a .redirect file that can change what A and B are pointed to. 
		You can have a "VelocityTemplate.groovy" and a "GroovyTemplate.groovy" shared dependency, and
		then you can have A.setTemplateService.redirect point to "VelocityTemplate.groovy" and 
		B.setTemplateService.redirect points to "GroovyTemplate.groovy".  Now you have all your flexibility
		and it can be changed in the configuration rather than in your java sources.</p>
		
	<p class="text">Furthermore, the <em>.redirect</em> format now supports redirection to a specific
				other context.  For instance, instead of just pointing to 
				"TemplateService", one can now point to 
				"contextA/contextB/TemplateService", if desired.</p>
	<p class="text">The end result is that renaming the names in the annotations is a tool to increase
		readability.  It lets you simplify your filenames too.  Of course, you can still use it
	    for ad hoc flexibility in smaller projects, if you like.</p>
	<p class="text">One further note about redirects.  A redirect will seek to preserve the original context from 
	which it was called.  For instance, let's say we have two contexts - root and context_1.  In root, we have
	the shared dependency TemplateService.groovy.  We have the same file in context_1 returning a different implementation
	of our templating service.  Now let's say there's a .redirect file in root pointing to "templateService".  What will 
	an object created in context "context_1" get when it's .redirect dependency file is evaluated?  The object is
	in context_1, the .redirect is in root.  The answer is, the object will get the context_1 shared templateService.
	The upshot of all that is that usually you only need one .redirect file at the root level to redirect all shared
	dependencies in all contexts - you don't need to duplicate .redirect files in every context.</p>
	  
	  <div class="snippet">
	  	<a name="redirect-note"></a>
	     <p class="text"><sup>1</sup> - Of course, you could change just the configuration and make 
	     <span class="code">velocityTemplate.groovy</span> return a <span class="code">GroovyTemplateService</span> object.
	     That would be ugly.  Also, part of the point of the .redirect is that it preserves the sharing of the
	     shared dependencies.  <code>A.groovyService.groovy</code> could always return a <code>GroovyTemplateService</code> object,
	     but it would not be the same instance as other classes that also wished to use it.  If all classes are redirected
	     to the one <code>groovyTemplateService.groovy</code> config file, then they will all reuse the same object
	     instance, which will save on memory.</p>
	  </div>  
</webContent>
	
